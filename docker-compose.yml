services:
  # PostgreSQL Database for Keycloak
  postgres:
    image: postgres:15-alpine
    container_name: cloudgate-postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - cloudgate-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak Identity Provider
  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    container_name: cloudgate-keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak_password
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin_password
    command: start-dev --http-enabled=true --hostname-strict=false --hostname-strict-https=false
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cloudgate-network
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/localhost/8080"]
      interval: 15s
      timeout: 5s
      retries: 8
      start_period: 60s

  # CloudGate Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cloudgate-backend
    environment:
      - DATABASE_TYPE=postgres
      - DATABASE_URL=postgresql://keycloak:keycloak_password@postgres:5432/keycloak
      - RUN_MIGRATIONS=true
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID}
      - MICROSOFT_CLIENT_SECRET=${MICROSOFT_CLIENT_SECRET}
      - SLACK_CLIENT_ID=${SLACK_CLIENT_ID}
      - SLACK_CLIENT_SECRET=${SLACK_CLIENT_SECRET}
      - TRELLO_CLIENT_ID=${TRELLO_CLIENT_ID}
      - TRELLO_CLIENT_SECRET=${TRELLO_CLIENT_SECRET}
      - NOTION_CLIENT_ID=${NOTION_CLIENT_ID}
      - NOTION_CLIENT_SECRET=${NOTION_CLIENT_SECRET}
      - JIRA_CLIENT_ID=${JIRA_CLIENT_ID}
      - JIRA_CLIENT_SECRET=${JIRA_CLIENT_SECRET}
      - DROPBOX_CLIENT_ID=${DROPBOX_CLIENT_ID}
      - DROPBOX_CLIENT_SECRET=${DROPBOX_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - PORT=8081
      - ALLOWED_ORIGINS=http://localhost:3000,http://frontend:3000,http://localhost:3001
    ports:
      - "8081:8081"
    depends_on:
      keycloak:
        condition: service_healthy
    networks:
      - cloudgate-network
    volumes:
      - ./backend/.env:/app/.env:ro
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8081/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev # Use development Dockerfile for local development
    container_name: cloudgate-frontend
    environment:
      NEXT_PUBLIC_KEYCLOAK_URL: http://localhost:8080
      NEXT_PUBLIC_KEYCLOAK_REALM: cloudgate
      NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: cloudgate-frontend
      NEXT_PUBLIC_API_URL: http://localhost:8081
      NODE_ENV: development
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - cloudgate-network
    volumes:
      - ./frontend:/app:cached # For development hot reload
      - /app/node_modules # Don't override node_modules
    command: npm run dev

volumes:
  postgres_data:
    driver: local

networks:
  cloudgate-network:
    driver: bridge
